library(lazySVM)
library(readr)
addData <- read_csv("~/Documents/IDS4934/capstone/addData.csv")
View(addData)
?lazySVM
irus
iris
summary(iris)
dataframe <- data.frame(iris)
iris
lazySVM(dataframe, Sepal.Length ~ Sepal.Width + Petal.Length +Petal.Width, Sepal.Length)
dataframe <- data.frame(iris)
formula <- Sepal.Length ~ Sepal.Width + Petal.Length +Petal.Width
observations <- dataframe$Sepal.Length
# Required library.
require(e1071)
require(e1071)
# Create a training and testing set.
svm_size <- round(.8 * dim(dataframe)[1])
svm_train <- dataframe[1:svm_size,]
svm_test <- dataframe[-(1:svm_size),]
# Grid search for best Epsilon and Cost values. Made with help from: https://rpubs.com/richkt/280840
tuneResult1 <- tune(svm, formula,  data = dataframe,
ranges = list(epsilon = seq(0,1,0.01), cost = seq(0.01,5,0.05))
)
# Continuation of Grid Search.
tuneResult <- tune(svm, formula,  data = dataframe,
ranges = list(epsilon = seq(tuneResult1$best.model$epsilon*1.01,
tuneResult1$best.model$epsilon*1.1,
length.out = 10),
cost = seq(tuneResult1$best.model$cost-1,
tuneResult1$best.model$cost+1,
length=10)))
# SVM model with values from tuneResult.
svmModTuned = svm(forumla, data = dataframe, cost=tuneResult$best.parameters$cost, epsilon=tuneResult$best.parameters$epsilon, cross=10, scale=F, kernal='radial')
# SVM model with values from tuneResult.
svmModTuned = svm(formula, data = dataframe, cost=tuneResult$best.parameters$cost, epsilon=tuneResult$best.parameters$epsilon, cross=10, scale=F, kernal='radial')
# Results of training set.
svmModPredTuned <- predict(svmModTuned, svm_train)
errvalTuned <- obersvations - svmModPredTuned
svm_RMSETuned <- RMSE(errvalTuned, obs=observations)
print(paste('Tuned SVM RMSE: ', svm_RMSETuned))
errvalTuned <- observations - svmModPredTuned
svm_RMSETuned <- RMSE(errvalTuned, obs=observations)
print(paste('Tuned SVM RMSE: ', svm_RMSETuned))
# Results of training set.
svmModPredTuned <- predict(svmModTuned, svm_train)
errvalTuned <- observations - svmModPredTuned
svm_RMSETuned <- RMSE(errvalTuned, obs=observations)
print(paste('Tuned SVM RMSE: ', svm_RMSETuned))
# Results of training set.
svmModPredTuned <- predict(svmModTuned, svm_train)
errvalTuned <- dataframe$observations - svmModPredTuned
svm_RMSETuned <- RMSE(errvalTuned, obs=dataframe$observations)
print(paste('Tuned SVM RMSE: ', svm_RMSETuned))
?RMSE
require(arm)
require(ISLR)
rmse()
require(boot)
?rmse
require(e1071)
?rmse
require(caret)
?RMSE
# Results of training set.
svmModPredTuned <- predict(svmModTuned, svm_train)
errvalTuned <- dataframe$observations - svmModPredTuned
svm_RMSETuned <- RMSE(errvalTuned, obs=dataframe$observations)
print(paste('Tuned SVM RMSE: ', svm_RMSETuned))
svmModPredTuned
errvalTuned
dataframe$observations
observations
dataframe
observations - svmModPredTuned
nrow(observations)
count(observations)
summary(observations)
str(observations)
str(svmModPredTuned)
svmModTuned
?RMSE
RMSE(svmModTuned, observations)
errvalTuned <- dataframe$observations - svmModPredTuned
(errvalTuned)
errvalTuned <- observations - svmModPredTuned
svmModTuned$MSE
svmModTuned$residuals
rmse <- function(residuals)
{
val = sqrt(mean(resideuals^2))
return(val)
}
rmse(svmModTuned$residuals)
rmse <- function(residuals)
{
val = sqrt(mean(residuals^2))
return(val)
}
rmse(svmModTuned$residuals)
paste('SVM RMSE: ',rmse(svmModTuned$residuals))
library(lazySVM)
library(lazySVM)
?lazySVM
library(lazySVM)
?lazySVM
dataframe <- data.frame(iris)
formula <- Sepal.Length ~ Sepal.Width + Petal.Length +Petal.Width
lazySVM(dataframe, formula)
print("hi")
cat("Hi")
library(lazySVM)
library(lazySVM)
?lazySVM
?lm
dataframe <- data.frame(iris)
formula <- Sepal.Length ~ Sepal.Width
lm(dataframe, formula)
?lm
lm(formula, dataframe)
mod1 <- lm(formula, dataframe)
mod1$residuals
rmse1 <- function(mod1$residuals)
{
val = sqrt(mean(residuals^2))
return(val)
}
dataframe <- data.frame(iris)
formula <- Sepal.Length ~ Sepal.Width
model <- lm(formula, dataframe)
rmse <- function(model$residuals)
{
val = sqrt(mean(residuals^2))
return(val)
}
rmse <- function(residuals)
{
val = sqrt(mean(residuals^2))
return(val)
}
rmse(model)
sqrt(mean(model$residuals))
model$residuals
model$df.residual
rmse <- function(model$residuals)
{
val = sqrt(mean(residuals^2))
return(val)
}
typeof(model$residuals)
errval <- model$residuals
rmse <- function(errval)
{
val = sqrt(mean(residuals^2))
return(val)
}
rmse
rmse <- function(residuals)
{
val = sqrt(mean(residuals^2))
return(val)
}
rmse(errvals)
rmse(errval)
library(lazyML)
?rmse
?lazySVM
